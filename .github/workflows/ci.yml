name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    name: Lint, Type Check, and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: gnaf_user
          POSTGRES_PASSWORD: gnaf_password
          POSTGRES_DB: gnaf_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm audit --audit-level=high

    - name: Run ESLint
      run: npm run lint

    - name: Run TypeScript type checking
      run: npm run typecheck

    - name: Build application
      run: npm run build

    - name: Setup test environment
      run: |
        # Create logs directory
        mkdir -p logs
        
        # Set environment variables for tests
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://gnaf_user:gnaf_password@localhost:5432/gnaf_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "LOG_LEVEL=error" >> $GITHUB_ENV

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://gnaf_user:gnaf_password@localhost:5432/gnaf_db
        REDIS_URL: redis://localhost:6379
        LOG_LEVEL: error

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://gnaf_user:gnaf_password@localhost:5432/gnaf_db
        REDIS_URL: redis://localhost:6379
        LOG_LEVEL: error

    - name: Generate coverage report
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://gnaf_user:gnaf_password@localhost:5432/gnaf_db
        REDIS_URL: redis://localhost:6379
        LOG_LEVEL: error

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results/
          logs/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        npm audit --audit-level=moderate

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json > snyk-results.json

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          npm-audit.json
          snyk-results.json

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Run Docker security scan
      if: always()
      run: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan the built image
        trivy image --format json --output trivy-results.json ${{ steps.meta.outputs.tags }}
        trivy image --severity HIGH,CRITICAL ${{ steps.meta.outputs.tags }}

    - name: Upload Docker scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-security-scan
        path: trivy-results.json

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    services:
      postgres:
        image: postgis/postgis:15-3.3
        env:
          POSTGRES_USER: gnaf_user
          POSTGRES_PASSWORD: gnaf_password
          POSTGRES_DB: gnaf_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start application for testing
      run: |
        npm run build
        npm start &
        APP_PID=$!
        echo "APP_PID=$APP_PID" >> $GITHUB_ENV
        
        # Wait for app to be ready
        sleep 30
        
        # Check if app is responding
        curl -f http://localhost:3000/api/v1/health/live || exit 1
      env:
        NODE_ENV: production
        DATABASE_URL: postgresql://gnaf_user:gnaf_password@localhost:5432/gnaf_db
        REDIS_URL: redis://localhost:6379
        LOG_LEVEL: error

    - name: Install k6 for load testing
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        # Create k6 test script
        cat > performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        import { Rate, Trend } from 'k6/metrics';

        export const errorRate = new Rate('errors');
        export const responseTime = new Trend('response_time');

        export let options = {
          stages: [
            { duration: '2m', target: 50 }, // Ramp up
            { duration: '5m', target: 50 }, // Stay at 50 users
            { duration: '2m', target: 100 }, // Ramp to 100 users
            { duration: '5m', target: 100 }, // Stay at 100 users
            { duration: '2m', target: 0 }, // Ramp down
          ],
          thresholds: {
            http_req_duration: ['p(95)<1000'], // 95% of requests under 1s
            http_req_failed: ['rate<0.05'], // Error rate under 5%
          },
        };

        export default function () {
          // Test health endpoint
          let healthResponse = http.get('http://localhost:3000/api/v1/health');
          check(healthResponse, {
            'health endpoint status is 200': (r) => r.status === 200,
          });
          
          // Test metrics endpoint
          let metricsResponse = http.get('http://localhost:3000/metrics');
          check(metricsResponse, {
            'metrics endpoint status is 200': (r) => r.status === 200,
          });

          errorRate.add(healthResponse.status !== 200);
          responseTime.add(healthResponse.timings.duration);
          
          sleep(1);
        }
        EOF
        
        # Run k6 test
        k6 run --out json=performance-results.json performance-test.js

    - name: Stop application
      if: always()
      run: |
        if [ -n "$APP_PID" ]; then
          kill $APP_PID || true
        fi

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: performance-results.json

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, build-docker, performance-test]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.lint-and-test.result == 'success' && needs.security-scan.result == 'success' && needs.build-docker.result == 'success'
      run: |
        echo "✅ CI Pipeline completed successfully!"
        echo "Image: ${{ needs.build-docker.outputs.image-tag }}"
        echo "Digest: ${{ needs.build-docker.outputs.image-digest }}"

    - name: Notify failure
      if: needs.lint-and-test.result == 'failure' || needs.security-scan.result == 'failure' || needs.build-docker.result == 'failure'
      run: |
        echo "❌ CI Pipeline failed!"
        echo "Lint/Test: ${{ needs.lint-and-test.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Docker Build: ${{ needs.build-docker.result }}"
        exit 1