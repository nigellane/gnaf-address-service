input {
  beats {
    port => 5044
  }
}

filter {
  # Parse JSON log entries from Winston
  if [fields][log_type] == "gnaf-application" {
    json {
      source => "message"
    }
    
    # Extract timestamp
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS" ]
    }
    
    # Add service identification
    mutate {
      add_field => { "service_name" => "gnaf-address-service" }
      add_field => { "log_source" => "application" }
    }
    
    # Parse request correlation IDs
    if [requestId] {
      mutate {
        add_field => { "correlation_id" => "%{requestId}" }
      }
    }
    
    # Categorize log levels
    if [level] == "error" {
      mutate {
        add_field => { "log_category" => "error" }
        add_field => { "alert_priority" => "high" }
      }
    } else if [level] == "warn" {
      mutate {
        add_field => { "log_category" => "warning" }
        add_field => { "alert_priority" => "medium" }
      }
    } else {
      mutate {
        add_field => { "log_category" => "info" }
        add_field => { "alert_priority" => "low" }
      }
    }
    
    # Parse performance logs
    if [performanceLog] {
      mutate {
        add_field => { "log_type" => "performance" }
      }
      
      # Extract performance metrics
      if [duration] {
        mutate {
          convert => { "duration" => "integer" }
        }
      }
    }
    
    # Parse security logs
    if [securityLog] {
      mutate {
        add_field => { "log_type" => "security" }
        add_field => { "alert_priority" => "critical" }
      }
    }
    
    # Parse slow query logs
    if [slowQueryLog] {
      mutate {
        add_field => { "log_type" => "database_performance" }
        add_field => { "alert_priority" => "medium" }
      }
    }
    
    # Parse business metrics
    if [businessMetric] {
      mutate {
        add_field => { "log_type" => "business_metrics" }
      }
    }
    
    # Parse cache miss logs
    if [cacheMissLog] {
      mutate {
        add_field => { "log_type" => "cache_performance" }
      }
    }
  }
  
  # Handle container logs
  if [container] {
    mutate {
      add_field => { "container_name" => "%{[container][name]}" }
      add_field => { "container_id" => "%{[container][id]}" }
    }
  }
  
  # Geolocation for IP addresses
  if [ip] and [ip] != "127.0.0.1" and [ip] != "::1" {
    geoip {
      source => "ip"
      target => "geoip"
    }
  }
  
  # Remove unnecessary fields
  mutate {
    remove_field => [ "agent", "ecs", "host", "@version", "input", "tags" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "gnaf-logs-%{+YYYY.MM.dd}"
  }
  
  # Output high-priority alerts to separate index for alerting
  if [alert_priority] in ["high", "critical"] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "gnaf-alerts-%{+YYYY.MM.dd}"
    }
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}